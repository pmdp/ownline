# Redirect HTTP traffic to HTTPS
server {
    listen 80;
    listen [::]:80;
    server_name psrv.xyz www.psrv.xyz;

    location / {
        return 301 https://psrv.xyz$request_uri;
    }
}
# HTTPS server
server {
    listen 443 ssl http2;
    server_name psrv.xyz;

    # Define the specified charset to the “Content-Type” response header field
    charset utf-8;

    # max upload file
    client_max_body_size 1M;

    # Define the directory where the contents being requested are stored
    root /var/www/ownline_frontend/html;

    # SSL config
    ssl on;
    ssl_protocols TLSv1.2;
    ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
    ssl_prefer_server_ciphers on;
    ssl_certificate /path/to/fullchain.pem;
    ssl_certificate_key /path/to/privkey.pem;
    ssl_trusted_certificate /path/to/chain.pem;
    ssl_session_cache shared:SSL:128m;

    # force a HTTPS connection to your domain and to all of its subdomains for 1 year
    add_header Strict-Transport-Security "max-age=31557600; includeSubDomains";

    # No allow to frame us
    add_header X-Frame-Options "SAMEORIGIN" always;

    # stops a browser from trying to MIME-sniff the content type and forces it to stick with the declared content-type
    add_header X-Content-Type-Options "nosniff" always;

    # sets the configuration for the cross-site scripting filter built into most browsers
    add_header X-Xss-Protection "1; mode=block";

    # defines approved sources of content that the browser may load
    #add_header Content-Security-Policy "default-src 'self'; script-src 'self' *.google-analytics.com";

    add_header Referrer-Policy origin-when-cross-origin;

    # Enable OCSP stapling, which is well described in details here
    ssl_stapling on;
    ssl_stapling_verify on;

    # Your favorite resolver may be used instead of the Google one below
    resolver 8.8.8.8;

    location / {
        include uwsgi_params; # include uwsgi_params config file for getting thing like $remote_addr
        uwsgi_pass unix:///tmp/uwsgi.sock; #or 127.0.0.1:3031;

        #uwsgi_param Host $host;
        #uwsgi_param X-Real-IP $remote_addr; # the IP address of the user
        #uwsgi_param X-Forwarded-For $proxy_add_x_forwarded_for; # the IP addresses of every server the client has been proxied through up to this point
        #uwsgi_param X-Forwarded-Proto $http_x_forwarded_proto; # http or https
    }

    location /public {
        internal; # only allowed for internal redirects (X-Accel from flask)
        alias /srv/ownline_backend/public;
        root index.html; # only public unauthenticated file containing login form
    }

    location /private {
        internal; # only allowed for internal redirects (X-Accel from flask)
        alias /srv/ownline_backend/private;
    }

}